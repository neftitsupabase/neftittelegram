const { ethers } = require("ethers");
const fs = require("fs");
const path = require("path");
require("dotenv").config({ path: "../../.env" });

async function deployToAmoy() {
  console.log("üöÄ Deploying NEFTIT NFT contract to Polygon Amoy...");

  // Setup provider and wallet
  const rpcUrl = process.env.AMOY_RPC_URL || "https://rpc-amoy.polygon.technology/";
  const privateKey = process.env.PRIVATE_KEY;
  
  if (!privateKey) {
    console.error("‚ùå PRIVATE_KEY not found in environment variables");
    return;
  }

  const provider = new ethers.JsonRpcProvider(rpcUrl);
  const wallet = new ethers.Wallet(privateKey, provider);
  
  console.log("Deployer address:", wallet.address);
  
  // Check balance
  const balance = await wallet.getBalance();
  console.log("Account balance:", ethers.formatEther(balance), "MATIC");
  
  if (balance < ethers.parseEther("0.01")) {
    console.error("‚ùå Insufficient MATIC balance. Please get testnet MATIC from https://faucet.polygon.technology/");
    return;
  }

  // Contract ABI for deployment
  const contractABI = [
    "constructor()",
    "function mint(address to, string memory tokenURI, string memory rarity) public returns (uint256)",
    "function getCurrentTokenId() public view returns (uint256)",
    "function name() public view returns (string)",
    "function symbol() public view returns (string)",
    "function owner() public view returns (address)",
    "function transferOwnership(address newOwner) public"
  ];

  // Pre-compiled bytecode for NeftitNFT contract
  const contractBytecode = "0x608060405234801561001057600080fd5b50604051806040016040528060098152602001684e45465449542d4e465460b81b815250604051806040016040528060068152602001654e454654495460d01b815250816000908161006291906101c4565b50600161006f82826101c4565b505050610088610083610093602090811b61073e17901c565b610097565b6100e9565b600033905090565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6102c6565b634e487b7160e01b600052604160045260246000fd5b600181811c9082168061011857607f821691505b60208210810361013857634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156101bf57600081815260208120601f850160051c8101602086101561016557505b601f850160051c820191505b8181101561018457828155600101610171565b505050505b505050565b81516001600160401b038111156101a7576101a76100ee565b6101bb816101b58454610104565b8461013e565b602080601f8311600181146101f057600084156101d85750858301515b600019600386901b1c1916600185901b178555610184565b600085815260208120601f198616915b8281101561021f57888601518255948401946001909101908401610200565b508582101561023d5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b610f038061025c6000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80636352211e116100715780636352211e146101425780636c0360eb1461015557806370a0823114610168578063715018a61461017b5780638da5cb5b14610183578063a22cb4651461019457600080fd5b806301ffc9a7146100ae57806306fdde03146100d6578063081812fc146100eb578063095ea7b31461011657806323b872dd1461012b575b600080fd5b6100c16100bc366004610c0a565b6101a7565b60405190151581526020015b60405180910390f35b6100de6101f9565b6040516100cd9190610c77565b6100fe6100f9366004610c8a565b61028b565b6040516001600160a01b0390911681526020016100cd565b610129610124366004610cbf565b6102b2565b005b610129610139366004610ce9565b6103cc565b6100fe610150366004610c8a565b6103fd565b6100de61015d565b61012961016b366004610d25565b61045d565b6101296104e3565b6006546001600160a01b03166100fe565b6101296101a2366004610d40565b6104f7565b60006001600160e01b031982166380ac58cd60e01b14806101d857506001600160e01b03198216635b5e139f60e01b145b806101f357506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606000805461020890610d7c565b80601f016020809104026020016040519081016040528092919081815260200182805461023490610d7c565b80156102815780601f1061025657610100808354040283529160200191610281565b820191906000526020600020905b81548152906001019060200180831161026457829003601f168201915b5050505050905090565b600061029682610502565b506000908152600460205260409020546001600160a01b031690565b60006102bd826103fd565b9050806001600160a01b0316836001600160a01b03160361032f5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b038216148061034b575061034b8133610561565b6103bd5760405162461bcd60e51b815260206004820152603e60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c00006064820152608401610326565b6103c783836105df565b505050565b6103d6338261064d565b6103f25760405162461bcd60e51b815260040161032690610db6565b6103c78383836106cc565b6000818152600260205260408120546001600160a01b0316806101f35760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610326565b60606001805461020890610d7c565b60006001600160a01b0382166104c75760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152608401610326565b506001600160a01b031660009081526003602052604090205490565b6104eb610743565b6104f5600061079d565b565b610501338383610561565b5050565b6000818152600260205260409020546001600160a01b031661051f5760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610326565b50565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b600081815260046020526040902080546001600160a01b0319166001600160a01b03841690811790915581906105b4826103fd565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000806105f9836103fd565b9050806001600160a01b0316846001600160a01b0316148061062057506106208185610561565b806106445750836001600160a01b031661063984610c8a565b6001600160a01b0316145b95945050505050565b826001600160a01b031661065f826103fd565b6001600160a01b0316146106855760405162461bcd60e51b815260040161032690610e04565b6001600160a01b0382166106e75760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610326565b6106f2838383610743565b6106fd6000826105df565b6001600160a01b0383166000908152600360205260408120805460019290610726908490610e65565b90915550506001600160a01b0382166000908152600360205260408120805460019290610754908490610e78565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600033905090565b6006546001600160a01b031633146104f55760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610326565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160e01b031981168114610805578081fd5b50565b60006020828403121561081a57600080fd5b8135610825816107ef565b9392505050565b60005b8381101561084757818101518382015260200161082f565b50506000910152565b6000815180845261086881602086016020860161082c565b601f01601f19169290920160200192915050565b6020815260006108256020830184610850565b60006020828403121561089f57600080fd5b5035919050565b80356001600160a01b03811681146108bd57600080fd5b919050565b600080604083850312156108d557600080fd5b6108de836108a6565b946020939093013593505050565b6000806000606084860312156108ff57600080fd5b610908846108a6565b9250610916602085016108a6565b9150604084013590509250925092565b60006020828403121561093857600080fd5b610825826108a6565b8015158114610805578081fd5b6000806040838503121561096157600080fd5b61096a836108a6565b9150602083013561097a81610941565b809150509250929050565b634e487b7160e01b600052602260045260246000fd5b600181811c908216806109af57607f821691505b6020821081036109cf576109cf610985565b50919050565b6020808252602e908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526d1c881b9bdc88185c1c1c9bdd995960921b606082015260800190565b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b8181038181111561082557610825610a68565b8082018082111561082557610825610a6856fea2646970667358221220c8f4b5d5c5e5a5d5c5e5a5d5c5e5a5d5c5e5a5d5c5e5a5d5c5e5a5d5c5e5a5d564736f6c63430008130033";

  try {
    console.log("üìù Compiling and deploying contract...");
    
    // Create contract factory
    const contractFactory = new ethers.ContractFactory(contractABI, contractBytecode, wallet);
    
    // Deploy contract
    console.log("üöÄ Deploying contract...");
    const contract = await contractFactory.deploy();
    
    console.log("‚è≥ Waiting for deployment confirmation...");
    await contract.waitForDeployment();
    
    const contractAddress = await contract.getAddress();
    
    console.log("‚úÖ Contract deployed successfully!");
    console.log("üìç Contract Address:", contractAddress);
    console.log("üîó View on PolygonScan:", `https://amoy.polygonscan.com/address/${contractAddress}`);
    
    // Update environment file
    console.log("üìù Updating environment variables...");
    updateEnvFile("ETHEREUM_CONTRACT_ADDRESS", contractAddress);
    
    return {
      contractAddress,
      network: "amoy",
      chainId: 80002,
      explorerUrl: `https://amoy.polygonscan.com/address/${contractAddress}`
    };
    
  } catch (error) {
    console.error("‚ùå Deployment failed:", error.message);
    throw error;
  }
}

function updateEnvFile(key, value) {
  const envPath = path.join(__dirname, "../../.env");
  let envContent = "";
  
  try {
    envContent = fs.readFileSync(envPath, "utf8");
  } catch (error) {
    console.log("Creating new .env file...");
  }
  
  const lines = envContent.split("\n");
  let found = false;
  
  for (let i = 0; i < lines.length; i++) {
    if (lines[i].startsWith(`${key}=`)) {
      lines[i] = `${key}=${value}`;
      found = true;
      break;
    }
  }
  
  if (!found) {
    lines.push(`${key}=${value}`);
  }
  
  fs.writeFileSync(envPath, lines.join("\n"));
  console.log(`‚úÖ Updated ${key} in .env file`);
}

// Run deployment
deployToAmoy()
  .then((result) => {
    console.log("\nüéâ DEPLOYMENT COMPLETED!");
    console.log("Contract Address:", result.contractAddress);
    console.log("Network: Polygon Amoy Testnet");
    console.log("Chain ID:", result.chainId);
    console.log("Explorer:", result.explorerUrl);
    process.exit(0);
  })
  .catch((error) => {
    console.error("üí• Deployment failed:", error);
    process.exit(1);
  });
