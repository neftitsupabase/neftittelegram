-- Alternative Users Table Schema WITHOUT RLS
-- Use this if the RLS policies are causing issues

-- Create the users table with all necessary columns
CREATE TABLE IF NOT EXISTS users (
  -- Primary identifier - UUID generated by Supabase
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  
  -- Main wallet address (serves as the primary login identifier)
  wallet_address TEXT UNIQUE NOT NULL,
  
  -- User profile information
  email TEXT,
  display_name TEXT,
  avatar_url TEXT,
  
  -- Provider information for the primary login method
  provider TEXT, -- wallet provider or social provider
  social_provider TEXT, -- specific social provider (google, discord, twitter)
  wallet_type TEXT, -- wallet type (metamask, phantom, coinbase, etc.)
  
  -- Additional metadata
  metadata JSONB DEFAULT '{}'::jsonb,
  
  -- Connection tracking columns
  linked_wallet_addresses JSONB DEFAULT '[]'::jsonb, -- Additional wallet connections
  linked_social_accounts JSONB DEFAULT '[]'::jsonb,  -- Additional social connections
  connection_history JSONB DEFAULT '[]'::jsonb,      -- History of all connections/disconnections
  
  -- Timestamps
  created_at TIMESTAMPTZ DEFAULT now(),
  updated_at TIMESTAMPTZ DEFAULT now(),
  last_login TIMESTAMPTZ DEFAULT now()
);

-- Create indexes for performance
CREATE INDEX IF NOT EXISTS idx_users_wallet_address ON users(wallet_address);
CREATE INDEX IF NOT EXISTS idx_users_email ON users(email);
CREATE INDEX IF NOT EXISTS idx_users_social_provider ON users(social_provider);
CREATE INDEX IF NOT EXISTS idx_users_wallet_type ON users(wallet_type);

-- Create indexes for JSONB columns
CREATE INDEX IF NOT EXISTS idx_users_linked_wallets ON users USING GIN(linked_wallet_addresses);
CREATE INDEX IF NOT EXISTS idx_users_linked_socials ON users USING GIN(linked_social_accounts);
CREATE INDEX IF NOT EXISTS idx_users_connection_history ON users USING GIN(connection_history);

-- Create function to automatically update the updated_at timestamp
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = now();
  RETURN NEW;
END;
$$ language 'plpgsql';

-- Create trigger to automatically update updated_at
DROP TRIGGER IF EXISTS update_users_updated_at ON users;
CREATE TRIGGER update_users_updated_at
  BEFORE UPDATE ON users
  FOR EACH ROW
  EXECUTE FUNCTION update_updated_at_column();

-- DISABLE RLS completely for users table
ALTER TABLE users DISABLE ROW LEVEL SECURITY;

-- Grant full permissions to all roles
GRANT ALL ON users TO authenticated;
GRANT ALL ON users TO anon;
GRANT USAGE ON SCHEMA public TO anon;
GRANT USAGE ON SCHEMA public TO authenticated;

-- Allow public access to all functions
GRANT EXECUTE ON ALL FUNCTIONS IN SCHEMA public TO anon;
GRANT EXECUTE ON ALL FUNCTIONS IN SCHEMA public TO authenticated;
